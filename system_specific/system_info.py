import platform

from pathlib import Path
from typing import Dict
from common.singleton import Singleton
from system_specific import *


class SystemInfo(metaclass=Singleton):

    package_managers: Dict[str, str] = {
        'debian': 'apt-get',
        'arch': 'pacman',
        'gentoo': 'emerge',
        'suse': 'zypp',
        'redhat': 'yum'
    }

    def __init__(self):
        self.system: str = platform.system()
        self.release: str = platform.release()
        self.version: str = platform.version()
        self.full_name: str = self.system + ' ' + self.release + ' ' + self.version
        self.system_class: BaseSystem
        self.create_system_class()

    def create_system_class(self):
        if self.system == 'Windows':
            self.system_class = Windows()
        elif self.system == 'Linux':
            if 'debian' in self.full_name().lower():
                self.system_class = Debian()
            elif 'arch' in self.full_name().lower():
                self.system_class = Arch()
            elif 'redhat' in self.full_name().lower():
                # TODO check what redhat/centos is returning
                self.system_class = Redhat()
            elif 'microsoft' in self.full_name().lower():
                # WSL
                pass
            else:
                # TODO add exception handling
                pass

    def get_repo_save_path(self, directory: str) -> str:
        return self.system_class.get_repo_save_path(directory)

    def clone_repo(self, url: str) -> str:
        return self.system_class.clone_repo(url)

    def pip_install(package: str):
        self.system_class.pip_install(package)

    def docker_pull(image: str):
        self.system_class.docker_pull(image)
