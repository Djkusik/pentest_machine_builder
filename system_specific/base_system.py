import logging
import subprocess
import sys
import docker

from abc import ABC, abstractclassmethod
from pathlib import Path
from git import Repo


class BaseSystem(ABC):

    def __init__(self):
        self.home_path: str = str(Path.home())
        self.docker_client = docker.from_env()

    # TODO check what exactly returns clone_from and base on output check if repo was cloned properly
    def clone_repo(self, url: str) -> str:
        save_path = self.get_repo_save_path(url.split('/')[-1][:-4])
        logging.info(f"Starting cloning {url.split('/')[-1][:-4]}...")
        repo = Repo.clone_from(url, save_path)
        logging.info(f"Successfully cloned {url.split('/')[-1][:-4]}")
        return save_path

    def pip_install(self, package: str):
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', package])

    def docker_pull(self, image: str):
        self.docker_client.images.pull(image)

    def get_save_path(self) -> str:
        self.save_path = self.home_path + '/Documents'
        return str(self.save_path)

    def get_repo_save_path(self, directory: str) -> str:
        self.repo_path = self.get_save_path() + '/' + directory
        return str(Path(self.repo_path))