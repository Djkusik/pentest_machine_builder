from __future__ import annotations
import platform

from pathlib import Path
from typing import Dict

class SystemInfo:

    _instance: SystemInfo = None

    package_managers: Dict[str, str] = {
        'debian'    : 'apt-get',
        'arch'      : 'pacman',
        'gentoo'    : 'emerge',
        'suse'      : 'zypp',
        'redhat'    : 'yum'
    }

    def __init__():
        system = platform.system()
        release = platform.release()
        version = platform.version()
        home_path = str(Path.home())

    @staticmethod
    def get_instance() -> SystemInfo:
        if SystemInfo._instance is None:
            SystemInfo._instance = SystemInfo()

        return SystemInfo._instance

    # def get_repo_save_path() -> str:
    #     home_path += '/Documents'
    #     return str(home_path)

    def get_repo_save_path(directory: str) -> str:
        home_path += '/Documents/' + directory
        return str(Path(home_path))
